"use strict";(self.webpackChunkflutter_guia_completa=self.webpackChunkflutter_guia_completa||[]).push([[2470],{2851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"desarrollo/arquitectura","title":"\ud83c\udfdb\ufe0f Arquitectura y Patrones","description":"Objetivo: Implementar Clean Architecture con BLoC Pattern para aplicaciones escalables","source":"@site/docs/desarrollo/arquitectura.md","sourceDirName":"desarrollo","slug":"/desarrollo/arquitectura","permalink":"/flutterFormacion/en/docs/desarrollo/arquitectura","draft":false,"unlisted":false,"editUrl":"https://github.com/tu-usuario/flutter-guia-completa/tree/main/docs/desarrollo/arquitectura.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udd10 Sistema de Autenticaci\xf3n Completo","permalink":"/flutterFormacion/en/docs/desarrollo/auth"},"next":{"title":"\ud83d\udd25 Integraci\xf3n con Firebase","permalink":"/flutterFormacion/en/docs/servicios/firebase"}}');var a=n(4848),o=n(8453);const r={sidebar_position:2},i="\ud83c\udfdb\ufe0f Arquitectura y Patrones",c={},l=[{value:"\ud83c\udfaf <strong>\xbfPor qu\xe9 Clean Architecture?</strong>",id:"-por-qu\xe9-clean-architecture",level:2},{value:"\ud83d\udcca <strong>Beneficios principales:</strong>",id:"-beneficios-principales",level:3},{value:"\ud83c\udfd7\ufe0f <strong>Las 3 capas principales:</strong>",id:"\ufe0f-las-3-capas-principales",level:3},{value:"\ud83c\udfd7\ufe0f <strong>Domain Layer - El Coraz\xf3n</strong>",id:"\ufe0f-domain-layer---el-coraz\xf3n",level:2},{value:"\ud83c\udfaf <strong>Entidades (Entities)</strong>",id:"-entidades-entities",level:3},{value:"\ud83d\udccb <strong>Repositories (Contratos)</strong>",id:"-repositories-contratos",level:3},{value:"\u2699\ufe0f <strong>Use Cases (Casos de Uso)</strong>",id:"\ufe0f-use-cases-casos-de-uso",level:3},{value:"\ud83d\udcbe <strong>Data Layer - Fuentes de Datos</strong>",id:"-data-layer---fuentes-de-datos",level:2},{value:"\ud83c\udf10 <strong>Remote Data Sources</strong>",id:"-remote-data-sources",level:3},{value:"\ud83d\udcbe <strong>Local Data Sources</strong>",id:"-local-data-sources",level:3},{value:"\ud83d\udcca <strong>Repository Implementation</strong>",id:"-repository-implementation",level:3},{value:"\ud83d\udcf1 <strong>Presentation Layer - BLoC Pattern</strong>",id:"-presentation-layer---bloc-pattern",level:2},{value:"\ud83c\udfaf <strong>PostCubit - Gesti\xf3n de Estado</strong>",id:"-postcubit---gesti\xf3n-de-estado",level:3},{value:"\ud83c\udfad <strong>PostState - Estados</strong>",id:"-poststate---estados",level:3},{value:"\ud83c\udfa8 <strong>UI Implementation</strong>",id:"-ui-implementation",level:2},{value:"\ud83d\udcf1 <strong>Posts Page</strong>",id:"-posts-page",level:3},{value:"\ud83e\uddea <strong>Testing la Arquitectura</strong>",id:"-testing-la-arquitectura",level:2},{value:"\ud83c\udfaf <strong>Test de Use Case</strong>",id:"-test-de-use-case",level:3},{value:"\u2705 <strong>Checklist de Arquitectura</strong>",id:"-checklist-de-arquitectura",level:2},{value:"\ud83c\udfaf <strong>Siguiente Paso</strong>",id:"-siguiente-paso",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"\ufe0f-arquitectura-y-patrones",children:"\ud83c\udfdb\ufe0f Arquitectura y Patrones"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Objetivo"}),": Implementar Clean Architecture con BLoC Pattern para aplicaciones escalables"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"En esta secci\xf3n aprender\xe1s a aplicar patrones de arquitectura profesionales que permiten crear aplicaciones Flutter mantenibles, testeable y escalables."}),"\n",(0,a.jsxs)(t.h2,{id:"-por-qu\xe9-clean-architecture",children:["\ud83c\udfaf ",(0,a.jsx)(t.strong,{children:"\xbfPor qu\xe9 Clean Architecture?"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-beneficios-principales",children:["\ud83d\udcca ",(0,a.jsx)(t.strong,{children:"Beneficios principales:"})]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\ud83e\udde9 ",(0,a.jsx)(t.strong,{children:"Separaci\xf3n de responsabilidades"})," - Cada capa tiene su prop\xf3sito"]}),"\n",(0,a.jsxs)(t.li,{children:["\ud83e\uddea ",(0,a.jsx)(t.strong,{children:"Facilidad de testing"})," - Cada capa se puede probar independientemente"]}),"\n",(0,a.jsxs)(t.li,{children:["\ud83d\udd04 ",(0,a.jsx)(t.strong,{children:"Flexibilidad"})," - Cambios en UI no afectan l\xf3gica de negocio"]}),"\n",(0,a.jsxs)(t.li,{children:["\ud83d\udc65 ",(0,a.jsx)(t.strong,{children:"Colaboraci\xf3n en equipo"})," - Estructura clara para todos"]}),"\n",(0,a.jsxs)(t.li,{children:["\ud83d\udcc8 ",(0,a.jsx)(t.strong,{children:"Escalabilidad"})," - F\xe1cil agregar nuevas funcionalidades"]}),"\n"]}),"\n",(0,a.jsxs)(t.h3,{id:"\ufe0f-las-3-capas-principales",children:["\ud83c\udfd7\ufe0f ",(0,a.jsx)(t.strong,{children:"Las 3 capas principales:"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"\ud83d\udcf1 Presentation Layer    \u2190 UI, Widgets, BLoCs\n\ud83d\udcca Domain Layer         \u2190 Business Logic, Entities, Use Cases  \n\ud83d\udcbe Data Layer          \u2190 APIs, Database, Models\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"\ufe0f-domain-layer---el-coraz\xf3n",children:["\ud83c\udfd7\ufe0f ",(0,a.jsx)(t.strong,{children:"Domain Layer - El Coraz\xf3n"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-entidades-entities",children:["\ud83c\udfaf ",(0,a.jsx)(t.strong,{children:"Entidades (Entities)"})]}),"\n",(0,a.jsx)(t.p,{children:"Las entidades representan los objetos de negocio principales de tu aplicaci\xf3n:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/domain/entities/post.dart"',children:"import 'package:equatable/equatable.dart';\n\nclass Post extends Equatable {\n  const Post({\n    required this.id,\n    required this.title,\n    required this.content,\n    required this.authorId,\n    required this.createdAt,\n    this.imageUrl,\n    this.likeCount = 0,\n    this.commentCount = 0,\n    this.isLiked = false,\n    this.tags = const [],\n  });\n\n  final String id;\n  final String title;\n  final String content;\n  final String authorId;\n  final DateTime createdAt;\n  final String? imageUrl;\n  final int likeCount;\n  final int commentCount;\n  final bool isLiked;\n  final List<String> tags;\n\n  @override\n  List<Object?> get props => [\n        id,\n        title,\n        content,\n        authorId,\n        createdAt,\n        imageUrl,\n        likeCount,\n        commentCount,\n        isLiked,\n        tags,\n      ];\n\n  Post copyWith({\n    String? id,\n    String? title,\n    String? content,\n    String? authorId,\n    DateTime? createdAt,\n    String? imageUrl,\n    int? likeCount,\n    int? commentCount,\n    bool? isLiked,\n    List<String>? tags,\n  }) {\n    return Post(\n      id: id ?? this.id,\n      title: title ?? this.title,\n      content: content ?? this.content,\n      authorId: authorId ?? this.authorId,\n      createdAt: createdAt ?? this.createdAt,\n      imageUrl: imageUrl ?? this.imageUrl,\n      likeCount: likeCount ?? this.likeCount,\n      commentCount: commentCount ?? this.commentCount,\n      isLiked: isLiked ?? this.isLiked,\n      tags: tags ?? this.tags,\n    );\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"-repositories-contratos",children:["\ud83d\udccb ",(0,a.jsx)(t.strong,{children:"Repositories (Contratos)"})]}),"\n",(0,a.jsxs)(t.p,{children:["Los repositories definen ",(0,a.jsx)(t.strong,{children:"qu\xe9"})," operaciones puedes hacer, no ",(0,a.jsx)(t.strong,{children:"c\xf3mo"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/domain/repositories/post_repository.dart"',children:"import '../entities/post.dart';\n\nabstract class PostRepository {\n  // \ud83d\udcc4 Operaciones CRUD\n  Future<List<Post>> getPosts({\n    int page = 1,\n    int limit = 10,\n    String? category,\n  });\n  \n  Future<Post> getPostById(String id);\n  \n  Future<Post> createPost(Post post);\n  \n  Future<Post> updatePost(Post post);\n  \n  Future<void> deletePost(String id);\n  \n  // \ud83d\udc4d Interacciones\n  Future<void> likePost(String postId);\n  \n  Future<void> unlikePost(String postId);\n  \n  // \ud83d\udd0d B\xfasqueda\n  Future<List<Post>> searchPosts(String query);\n  \n  // \ud83d\udcca Streams para datos en tiempo real\n  Stream<List<Post>> watchPosts();\n  \n  Stream<Post> watchPost(String id);\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"\ufe0f-use-cases-casos-de-uso",children:["\u2699\ufe0f ",(0,a.jsx)(t.strong,{children:"Use Cases (Casos de Uso)"})]}),"\n",(0,a.jsx)(t.p,{children:"Cada caso de uso representa una acci\xf3n espec\xedfica que el usuario puede realizar:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/domain/usecases/get_posts_usecase.dart"',children:"import 'package:injectable/injectable.dart';\n\nimport '../../core/resources/use_case.dart';\nimport '../../core/resources/data_state.dart';\nimport '../entities/post.dart';\nimport '../repositories/post_repository.dart';\n\n@injectable\nclass GetPostsUseCase implements UseCase<DataState<List<Post>>, GetPostsParams> {\n  const GetPostsUseCase(this._postRepository);\n\n  final PostRepository _postRepository;\n\n  @override\n  Future<DataState<List<Post>>> call(GetPostsParams params) async {\n    try {\n      // \ud83d\udcca Validaciones de negocio\n      if (params.page < 1) {\n        return const DataState.error('La p\xe1gina debe ser mayor a 0');\n      }\n      \n      if (params.limit < 1 || params.limit > 100) {\n        return const DataState.error('El l\xedmite debe estar entre 1 y 100');\n      }\n\n      // \ud83d\udcf1 Obtener posts\n      final posts = await _postRepository.getPosts(\n        page: params.page,\n        limit: params.limit,\n        category: params.category,\n      );\n\n      // \ud83c\udfaf L\xf3gica de negocio adicional\n      final filteredPosts = _applyBusinessRules(posts);\n\n      return DataState.success(filteredPosts);\n      \n    } catch (e) {\n      return DataState.error(e.toString());\n    }\n  }\n\n  List<Post> _applyBusinessRules(List<Post> posts) {\n    // \ud83d\udccb Ejemplo: filtrar posts con contenido inapropiado\n    return posts.where((post) => !_hasInappropriateContent(post)).toList();\n  }\n\n  bool _hasInappropriateContent(Post post) {\n    // \ud83d\udd0d L\xf3gica de validaci\xf3n de contenido\n    final inappropriateWords = ['spam', 'fake', 'scam'];\n    final content = '${post.title} ${post.content}'.toLowerCase();\n    \n    return inappropriateWords.any((word) => content.contains(word));\n  }\n}\n\nclass GetPostsParams {\n  const GetPostsParams({\n    this.page = 1,\n    this.limit = 10,\n    this.category,\n  });\n\n  final int page;\n  final int limit;\n  final String? category;\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"-data-layer---fuentes-de-datos",children:["\ud83d\udcbe ",(0,a.jsx)(t.strong,{children:"Data Layer - Fuentes de Datos"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-remote-data-sources",children:["\ud83c\udf10 ",(0,a.jsx)(t.strong,{children:"Remote Data Sources"})]}),"\n",(0,a.jsx)(t.p,{children:"Manejan la comunicaci\xf3n con APIs externas:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/data/datasources/remote/post_remote_datasource.dart"',children:"import 'package:dio/dio.dart';\nimport 'package:injectable/injectable.dart';\nimport 'package:retrofit/retrofit.dart';\n\nimport '../../../core/constants/api_constants.dart';\nimport '../../models/post_model.dart';\n\npart 'post_remote_datasource.g.dart';\n\n@RestApi(baseUrl: ApiConstants.baseUrl)\n@injectable\nabstract class PostRemoteDataSource {\n  @factoryMethod\n  factory PostRemoteDataSource(Dio dio) = _PostRemoteDataSource;\n\n  // \ud83d\udcc4 Operaciones CRUD\n  @GET('/posts')\n  Future<List<PostModel>> getPosts(\n    @Query('page') int page,\n    @Query('limit') int limit,\n    @Query('category') String? category,\n  );\n\n  @GET('/posts/{id}')\n  Future<PostModel> getPostById(@Path('id') String id);\n\n  @POST('/posts')\n  Future<PostModel> createPost(@Body() PostModel post);\n\n  @PUT('/posts/{id}')\n  Future<PostModel> updatePost(\n    @Path('id') String id,\n    @Body() PostModel post,\n  );\n\n  @DELETE('/posts/{id}')\n  Future<void> deletePost(@Path('id') String id);\n\n  // \ud83d\udc4d Interacciones\n  @POST('/posts/{id}/like')\n  Future<void> likePost(@Path('id') String postId);\n\n  @DELETE('/posts/{id}/like')\n  Future<void> unlikePost(@Path('id') String postId);\n\n  // \ud83d\udd0d B\xfasqueda\n  @GET('/posts/search')\n  Future<List<PostModel>> searchPosts(@Query('q') String query);\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"-local-data-sources",children:["\ud83d\udcbe ",(0,a.jsx)(t.strong,{children:"Local Data Sources"})]}),"\n",(0,a.jsx)(t.p,{children:"Manejan almacenamiento local (cache, base de datos local):"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/data/datasources/local/post_local_datasource.dart"',children:"import 'package:hive/hive.dart';\nimport 'package:injectable/injectable.dart';\n\nimport '../../../core/constants/storage_constants.dart';\nimport '../../models/post_model.dart';\n\nabstract class PostLocalDataSource {\n  Future<List<PostModel>> getCachedPosts();\n  Future<void> cachePosts(List<PostModel> posts);\n  Future<PostModel?> getCachedPost(String id);\n  Future<void> cachePost(PostModel post);\n  Future<void> deleteCachedPost(String id);\n  Future<void> clearCache();\n}\n\n@Injectable(as: PostLocalDataSource)\nclass PostLocalDataSourceImpl implements PostLocalDataSource {\n  PostLocalDataSourceImpl(this._hiveBox);\n\n  final Box<PostModel> _hiveBox;\n\n  @override\n  Future<List<PostModel>> getCachedPosts() async {\n    try {\n      return _hiveBox.values.toList()\n        ..sort((a, b) => b.createdAt.compareTo(a.createdAt));\n    } catch (e) {\n      throw Exception('Error obteniendo posts del cache: $e');\n    }\n  }\n\n  @override\n  Future<void> cachePosts(List<PostModel> posts) async {\n    try {\n      // \ud83d\uddd1\ufe0f Limpiar cache existente\n      await _hiveBox.clear();\n      \n      // \ud83d\udcbe Guardar nuevos posts\n      for (final post in posts) {\n        await _hiveBox.put(post.id, post);\n      }\n    } catch (e) {\n      throw Exception('Error guardando posts en cache: $e');\n    }\n  }\n\n  @override\n  Future<PostModel?> getCachedPost(String id) async {\n    try {\n      return _hiveBox.get(id);\n    } catch (e) {\n      throw Exception('Error obteniendo post del cache: $e');\n    }\n  }\n\n  @override\n  Future<void> cachePost(PostModel post) async {\n    try {\n      await _hiveBox.put(post.id, post);\n    } catch (e) {\n      throw Exception('Error guardando post en cache: $e');\n    }\n  }\n\n  @override\n  Future<void> deleteCachedPost(String id) async {\n    try {\n      await _hiveBox.delete(id);\n    } catch (e) {\n      throw Exception('Error eliminando post del cache: $e');\n    }\n  }\n\n  @override\n  Future<void> clearCache() async {\n    try {\n      await _hiveBox.clear();\n    } catch (e) {\n      throw Exception('Error limpiando cache: $e');\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"-repository-implementation",children:["\ud83d\udcca ",(0,a.jsx)(t.strong,{children:"Repository Implementation"})]}),"\n",(0,a.jsx)(t.p,{children:"Implementa la l\xf3gica de coordinaci\xf3n entre fuentes locales y remotas:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/data/repositories/post_repository_impl.dart"',children:"import 'package:injectable/injectable.dart';\n\nimport '../../core/network/network_info.dart';\nimport '../../domain/entities/post.dart';\nimport '../../domain/repositories/post_repository.dart';\nimport '../datasources/local/post_local_datasource.dart';\nimport '../datasources/remote/post_remote_datasource.dart';\n\n@Injectable(as: PostRepository)\nclass PostRepositoryImpl implements PostRepository {\n  const PostRepositoryImpl(\n    this._remoteDataSource,\n    this._localDataSource,\n    this._networkInfo,\n  );\n\n  final PostRemoteDataSource _remoteDataSource;\n  final PostLocalDataSource _localDataSource;\n  final NetworkInfo _networkInfo;\n\n  @override\n  Future<List<Post>> getPosts({\n    int page = 1,\n    int limit = 10,\n    String? category,\n  }) async {\n    if (await _networkInfo.isConnected) {\n      try {\n        // \ud83c\udf10 Obtener de API\n        final remotePosts = await _remoteDataSource.getPosts(\n          page,\n          limit,\n          category,\n        );\n\n        // \ud83d\udcbe Guardar en cache (solo primera p\xe1gina)\n        if (page == 1) {\n          await _localDataSource.cachePosts(remotePosts);\n        }\n\n        return remotePosts.map((model) => model.toEntity()).toList();\n        \n      } catch (e) {\n        // \ud83d\udcf1 Si falla API, usar cache\n        final cachedPosts = await _localDataSource.getCachedPosts();\n        return cachedPosts.map((model) => model.toEntity()).toList();\n      }\n    } else {\n      // \ud83d\udcf1 Sin internet, usar cache\n      final cachedPosts = await _localDataSource.getCachedPosts();\n      return cachedPosts.map((model) => model.toEntity()).toList();\n    }\n  }\n\n  @override\n  Future<Post> getPostById(String id) async {\n    if (await _networkInfo.isConnected) {\n      try {\n        final remotePost = await _remoteDataSource.getPostById(id);\n        \n        // \ud83d\udcbe Actualizar cache\n        await _localDataSource.cachePost(remotePost);\n        \n        return remotePost.toEntity();\n      } catch (e) {\n        // \ud83d\udcf1 Si falla API, usar cache\n        final cachedPost = await _localDataSource.getCachedPost(id);\n        if (cachedPost != null) {\n          return cachedPost.toEntity();\n        }\n        rethrow;\n      }\n    } else {\n      // \ud83d\udcf1 Sin internet, usar cache\n      final cachedPost = await _localDataSource.getCachedPost(id);\n      if (cachedPost != null) {\n        return cachedPost.toEntity();\n      }\n      throw Exception('Post no encontrado en cache');\n    }\n  }\n\n  @override\n  Future<Post> createPost(Post post) async {\n    if (!await _networkInfo.isConnected) {\n      throw Exception('Se requiere conexi\xf3n a internet para crear posts');\n    }\n\n    try {\n      final postModel = PostModel.fromEntity(post);\n      final createdPost = await _remoteDataSource.createPost(postModel);\n      \n      // \ud83d\udcbe Agregar al cache\n      await _localDataSource.cachePost(createdPost);\n      \n      return createdPost.toEntity();\n    } catch (e) {\n      throw Exception('Error creando post: $e');\n    }\n  }\n\n  @override\n  Future<void> likePost(String postId) async {\n    if (!await _networkInfo.isConnected) {\n      throw Exception('Se requiere conexi\xf3n a internet');\n    }\n\n    try {\n      await _remoteDataSource.likePost(postId);\n      \n      // \ud83d\udcbe Actualizar cache local\n      final cachedPost = await _localDataSource.getCachedPost(postId);\n      if (cachedPost != null) {\n        final updatedPost = cachedPost.copyWith(\n          likeCount: cachedPost.likeCount + 1,\n          isLiked: true,\n        );\n        await _localDataSource.cachePost(updatedPost);\n      }\n    } catch (e) {\n      throw Exception('Error dando like: $e');\n    }\n  }\n\n  @override\n  Stream<List<Post>> watchPosts() async* {\n    // \ud83d\udcca Implementar stream que combina datos locales y remotos\n    // Esta es una implementaci\xf3n simplificada\n    while (true) {\n      try {\n        final posts = await getPosts();\n        yield posts;\n        await Future.delayed(const Duration(seconds: 30)); // Polling cada 30s\n      } catch (e) {\n        // Manejar errores del stream\n      }\n    }\n  }\n\n  // ... Implementar resto de m\xe9todos\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"-presentation-layer---bloc-pattern",children:["\ud83d\udcf1 ",(0,a.jsx)(t.strong,{children:"Presentation Layer - BLoC Pattern"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-postcubit---gesti\xf3n-de-estado",children:["\ud83c\udfaf ",(0,a.jsx)(t.strong,{children:"PostCubit - Gesti\xf3n de Estado"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/presentation/cubit/post_cubit.dart"',children:"import 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:injectable/injectable.dart';\nimport 'package:freezed/freezed.dart';\n\nimport '../../core/resources/data_state.dart';\nimport '../../domain/entities/post.dart';\nimport '../../domain/usecases/get_posts_usecase.dart';\nimport '../../domain/usecases/create_post_usecase.dart';\nimport '../../domain/usecases/like_post_usecase.dart';\n\npart 'post_cubit.freezed.dart';\npart 'post_state.dart';\n\n@injectable\nclass PostCubit extends Cubit<PostState> {\n  PostCubit(\n    this._getPostsUseCase,\n    this._createPostUseCase,\n    this._likePostUseCase,\n  ) : super(const PostState.loading());\n\n  final GetPostsUseCase _getPostsUseCase;\n  final CreatePostUseCase _createPostUseCase;\n  final LikePostUseCase _likePostUseCase;\n\n  List<Post> _allPosts = [];\n  int _currentPage = 1;\n  bool _hasReachedMax = false;\n\n  Future<void> loadPosts({bool refresh = false}) async {\n    if (refresh) {\n      _currentPage = 1;\n      _hasReachedMax = false;\n      _allPosts.clear();\n      emit(const PostState.loading());\n    }\n\n    if (_hasReachedMax) return;\n\n    try {\n      final result = await _getPostsUseCase.call(\n        GetPostsParams(page: _currentPage, limit: 10),\n      );\n\n      result.when(\n        success: (posts) {\n          if (posts.isEmpty) {\n            _hasReachedMax = true;\n          } else {\n            _allPosts.addAll(posts);\n            _currentPage++;\n          }\n          \n          emit(PostState.loaded(\n            posts: List.from(_allPosts),\n            hasReachedMax: _hasReachedMax,\n          ));\n        },\n        error: (message) {\n          if (_allPosts.isEmpty) {\n            emit(PostState.error(message));\n          } else {\n            // Mantener posts existentes pero mostrar error\n            emit(PostState.loaded(\n              posts: List.from(_allPosts),\n              hasReachedMax: _hasReachedMax,\n              errorMessage: message,\n            ));\n          }\n        },\n      );\n    } catch (e) {\n      emit(PostState.error(e.toString()));\n    }\n  }\n\n  Future<void> createPost(Post post) async {\n    emit(PostState.creating(List.from(_allPosts)));\n\n    try {\n      final result = await _createPostUseCase.call(post);\n\n      result.when(\n        success: (createdPost) {\n          _allPosts.insert(0, createdPost);\n          emit(PostState.loaded(\n            posts: List.from(_allPosts),\n            hasReachedMax: _hasReachedMax,\n          ));\n        },\n        error: (message) {\n          emit(PostState.loaded(\n            posts: List.from(_allPosts),\n            hasReachedMax: _hasReachedMax,\n            errorMessage: message,\n          ));\n        },\n      );\n    } catch (e) {\n      emit(PostState.loaded(\n        posts: List.from(_allPosts),\n        hasReachedMax: _hasReachedMax,\n        errorMessage: e.toString(),\n      ));\n    }\n  }\n\n  Future<void> likePost(String postId) async {\n    try {\n      // \ud83c\udfaf Optimistic update\n      final postIndex = _allPosts.indexWhere((p) => p.id == postId);\n      if (postIndex != -1) {\n        final post = _allPosts[postIndex];\n        _allPosts[postIndex] = post.copyWith(\n          isLiked: !post.isLiked,\n          likeCount: post.isLiked \n              ? post.likeCount - 1 \n              : post.likeCount + 1,\n        );\n        emit(PostState.loaded(\n          posts: List.from(_allPosts),\n          hasReachedMax: _hasReachedMax,\n        ));\n      }\n\n      // \ud83c\udf10 Actualizar en servidor\n      await _likePostUseCase.call(postId);\n      \n    } catch (e) {\n      // \ud83d\udd04 Revertir cambio optimista en caso de error\n      await loadPosts(refresh: true);\n      emit(PostState.loaded(\n        posts: List.from(_allPosts),\n        hasReachedMax: _hasReachedMax,\n        errorMessage: 'Error actualizando like',\n      ));\n    }\n  }\n\n  void searchPosts(String query) {\n    if (query.isEmpty) {\n      emit(PostState.loaded(\n        posts: List.from(_allPosts),\n        hasReachedMax: _hasReachedMax,\n      ));\n      return;\n    }\n\n    final filteredPosts = _allPosts.where((post) {\n      return post.title.toLowerCase().contains(query.toLowerCase()) ||\n             post.content.toLowerCase().contains(query.toLowerCase());\n    }).toList();\n\n    emit(PostState.loaded(\n      posts: filteredPosts,\n      hasReachedMax: true, // No pagination en b\xfasqueda\n    ));\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"-poststate---estados",children:["\ud83c\udfad ",(0,a.jsx)(t.strong,{children:"PostState - Estados"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/presentation/cubit/post_state.dart"',children:"part of 'post_cubit.dart';\n\n@freezed\nclass PostState with _$PostState {\n  const factory PostState.loading() = _Loading;\n  \n  const factory PostState.loaded({\n    required List<Post> posts,\n    @Default(false) bool hasReachedMax,\n    String? errorMessage,\n  }) = _Loaded;\n  \n  const factory PostState.creating(List<Post> currentPosts) = _Creating;\n  \n  const factory PostState.error(String message) = _Error;\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"-ui-implementation",children:["\ud83c\udfa8 ",(0,a.jsx)(t.strong,{children:"UI Implementation"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-posts-page",children:["\ud83d\udcf1 ",(0,a.jsx)(t.strong,{children:"Posts Page"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="lib/presentation/pages/posts/posts_page.dart"',children:"import 'package:flutter/material.dart';\nimport 'package:flutter_bloc/flutter_bloc.dart';\nimport 'package:auto_route/auto_route.dart';\n\nimport '../../../core/di/injection.dart';\nimport '../../cubit/post_cubit.dart';\nimport '../../widgets/post_item.dart';\nimport '../../widgets/loading_indicator.dart';\nimport '../../widgets/error_message.dart';\n\n@RoutePage()\nclass PostsPage extends StatefulWidget implements AutoRouteWrapper {\n  const PostsPage({Key? key}) : super(key: key);\n\n  @override\n  Widget wrappedRoute(BuildContext context) {\n    return BlocProvider(\n      create: (_) => getIt<PostCubit>()..loadPosts(),\n      child: this,\n    );\n  }\n\n  @override\n  State<PostsPage> createState() => _PostsPageState();\n}\n\nclass _PostsPageState extends State<PostsPage> {\n  final _scrollController = ScrollController();\n  final _searchController = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    _scrollController.addListener(_onScroll);\n  }\n\n  void _onScroll() {\n    if (_scrollController.position.pixels ==\n        _scrollController.position.maxScrollExtent) {\n      // \ud83d\udcc4 Cargar m\xe1s posts al llegar al final\n      context.read<PostCubit>().loadPosts();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Posts'),\n        actions: [\n          IconButton(\n            icon: const Icon(Icons.add),\n            onPressed: _showCreatePostDialog,\n          ),\n        ],\n        bottom: PreferredSize(\n          preferredSize: const Size.fromHeight(60),\n          child: Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: TextField(\n              controller: _searchController,\n              decoration: InputDecoration(\n                hintText: 'Buscar posts...',\n                prefixIcon: const Icon(Icons.search),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(12),\n                ),\n              ),\n              onChanged: (query) {\n                context.read<PostCubit>().searchPosts(query);\n              },\n            ),\n          ),\n        ),\n      ),\n      body: BlocBuilder<PostCubit, PostState>(\n        builder: (context, state) {\n          return state.when(\n            loading: () => const LoadingIndicator(),\n            loaded: (posts, hasReachedMax, errorMessage) {\n              return RefreshIndicator(\n                onRefresh: () => context.read<PostCubit>().loadPosts(refresh: true),\n                child: Column(\n                  children: [\n                    if (errorMessage != null)\n                      ErrorMessage(\n                        message: errorMessage,\n                        onRetry: () => context.read<PostCubit>().loadPosts(),\n                      ),\n                    Expanded(\n                      child: ListView.builder(\n                        controller: _scrollController,\n                        itemCount: posts.length + (hasReachedMax ? 0 : 1),\n                        itemBuilder: (context, index) {\n                          if (index >= posts.length) {\n                            return const LoadingIndicator();\n                          }\n                          \n                          return PostItem(\n                            post: posts[index],\n                            onLike: () => context\n                                .read<PostCubit>()\n                                .likePost(posts[index].id),\n                          );\n                        },\n                      ),\n                    ),\n                  ],\n                ),\n              );\n            },\n            creating: (currentPosts) => Column(\n              children: [\n                const LinearProgressIndicator(),\n                Expanded(\n                  child: ListView.builder(\n                    itemCount: currentPosts.length,\n                    itemBuilder: (context, index) {\n                      return PostItem(\n                        post: currentPosts[index],\n                        onLike: () => context\n                            .read<PostCubit>()\n                            .likePost(currentPosts[index].id),\n                      );\n                    },\n                  ),\n                ),\n              ],\n            ),\n            error: (message) => ErrorMessage(\n              message: message,\n              onRetry: () => context.read<PostCubit>().loadPosts(refresh: true),\n            ),\n          );\n        },\n      ),\n    );\n  }\n\n  void _showCreatePostDialog() {\n    // Implementar dialog de creaci\xf3n de post\n  }\n\n  @override\n  void dispose() {\n    _scrollController.dispose();\n    _searchController.dispose();\n    super.dispose();\n  }\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"-testing-la-arquitectura",children:["\ud83e\uddea ",(0,a.jsx)(t.strong,{children:"Testing la Arquitectura"})]}),"\n",(0,a.jsxs)(t.h3,{id:"-test-de-use-case",children:["\ud83c\udfaf ",(0,a.jsx)(t.strong,{children:"Test de Use Case"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",metastring:'title="test/domain/usecases/get_posts_usecase_test.dart"',children:"import 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:mockito/annotations.dart';\n\nimport 'package:selfie_street/core/resources/data_state.dart';\nimport 'package:selfie_street/domain/entities/post.dart';\nimport 'package:selfie_street/domain/repositories/post_repository.dart';\nimport 'package:selfie_street/domain/usecases/get_posts_usecase.dart';\n\nimport 'get_posts_usecase_test.mocks.dart';\n\n@GenerateMocks([PostRepository])\nvoid main() {\n  late GetPostsUseCase usecase;\n  late MockPostRepository mockRepository;\n\n  setUp(() {\n    mockRepository = MockPostRepository();\n    usecase = GetPostsUseCase(mockRepository);\n  });\n\n  group('GetPostsUseCase', () {\n    final testPosts = [\n      Post(\n        id: '1',\n        title: 'Test Post',\n        content: 'Test content',\n        authorId: 'author1',\n        createdAt: DateTime.now(),\n      ),\n    ];\n\n    test('should return posts from repository when successful', () async {\n      // Arrange\n      when(mockRepository.getPosts(page: 1, limit: 10))\n          .thenAnswer((_) async => testPosts);\n\n      // Act\n      final result = await usecase.call(\n        const GetPostsParams(page: 1, limit: 10),\n      );\n\n      // Assert\n      expect(result, isA<DataState<List<Post>>>());\n      result.when(\n        success: (posts) => expect(posts, equals(testPosts)),\n        error: (_) => fail('Should return success'),\n      );\n      \n      verify(mockRepository.getPosts(page: 1, limit: 10));\n      verifyNoMoreInteractions(mockRepository);\n    });\n\n    test('should return error when page is invalid', () async {\n      // Act\n      final result = await usecase.call(\n        const GetPostsParams(page: 0, limit: 10),\n      );\n\n      // Assert\n      result.when(\n        success: (_) => fail('Should return error'),\n        error: (message) => expect(message, 'La p\xe1gina debe ser mayor a 0'),\n      );\n      \n      verifyZeroInteractions(mockRepository);\n    });\n\n    test('should filter inappropriate content', () async {\n      // Arrange\n      final postsWithInappropriate = [\n        Post(\n          id: '1',\n          title: 'Normal Post',\n          content: 'Good content',\n          authorId: 'author1',\n          createdAt: DateTime.now(),\n        ),\n        Post(\n          id: '2',\n          title: 'Spam Post',\n          content: 'This is spam content',\n          authorId: 'author2',\n          createdAt: DateTime.now(),\n        ),\n      ];\n      \n      when(mockRepository.getPosts(page: 1, limit: 10))\n          .thenAnswer((_) async => postsWithInappropriate);\n\n      // Act\n      final result = await usecase.call(\n        const GetPostsParams(page: 1, limit: 10),\n      );\n\n      // Assert\n      result.when(\n        success: (posts) {\n          expect(posts.length, 1);\n          expect(posts.first.title, 'Normal Post');\n        },\n        error: (_) => fail('Should return success'),\n      );\n    });\n  });\n}\n"})}),"\n",(0,a.jsxs)(t.h2,{id:"-checklist-de-arquitectura",children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Checklist de Arquitectura"})]}),"\n",(0,a.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Domain layer configurado correctamente"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Entidades definidas con Equatable"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Repository contracts creados"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use cases implementados con validaciones"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Data sources (remote/local) implementados"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Repository implementation con cache strategy"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","BLoC/Cubit con estados bien definidos"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","UI conectada correctamente con BLoC"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Dependency injection configurado"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Testing unitario implementado"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Error handling en todas las capas"]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{title:"\ud83c\udfd7\ufe0f Mejores Pr\xe1cticas",type:"tip",children:(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Una responsabilidad por clase"})," - Single Responsibility Principle"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Depender de abstracciones"}),", no de implementaciones"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Usar Freezed"})," para clases immutable"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Manejar estados de loading/error"})," consistentemente"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Cachear datos"})," para mejor UX offline"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Escribir tests"})," para la l\xf3gica cr\xedtica"]}),"\n"]})}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.h2,{id:"-siguiente-paso",children:["\ud83c\udfaf ",(0,a.jsx)(t.strong,{children:"Siguiente Paso"})]}),"\n",(0,a.jsx)(t.p,{children:"\xa1Excelente! Ya tienes una arquitectura robusta y escalable."}),"\n",(0,a.jsxs)(t.p,{children:["\ud83d\udc49 ",(0,a.jsx)(t.strong,{children:"Contin\xfaa con"}),": ",(0,a.jsx)(t.a,{href:"/flutterFormacion/en/docs/desarrollo/navigation",children:"Navegaci\xf3n y Routing"})]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"\u23f1\ufe0f Tiempo de implementaci\xf3n: 6-8 horas"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);