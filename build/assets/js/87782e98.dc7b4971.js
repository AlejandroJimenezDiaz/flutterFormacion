"use strict";(self.webpackChunkflutter_guia_completa=self.webpackChunkflutter_guia_completa||[]).push([[4357],{3204:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"servicios/firebase","title":"\ud83d\udd25 Integraci\xf3n con Firebase","description":"Objetivo: Configurar Firebase completo para una aplicaci\xf3n Flutter profesional","source":"@site/docs/servicios/firebase.md","sourceDirName":"servicios","slug":"/servicios/firebase","permalink":"/flutterFormacion/docs/servicios/firebase","draft":false,"unlisted":false,"editUrl":"https://github.com/tu-usuario/flutter-guia-completa/tree/main/docs/servicios/firebase.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfdb\ufe0f Arquitectura y Patrones","permalink":"/flutterFormacion/docs/desarrollo/arquitectura"},"next":{"title":"\ud83e\udd16 Despliegue en Google Play Store","permalink":"/flutterFormacion/docs/despliegue/google-play"}}');var a=i(4848),s=i(8453),r=i(7811);const o={sidebar_position:1},c="\ud83d\udd25 Integraci\xf3n con Firebase",l={},d=[{value:"\ud83c\udfaf <strong>Servicios Firebase que Implementaremos</strong>",id:"-servicios-firebase-que-implementaremos",level:2},{value:"\ud83d\udd27 <strong>Backend as a Service:</strong>",id:"-backend-as-a-service",level:3},{value:"\ud83d\ude80 <strong>Configuraci\xf3n Inicial</strong>",id:"-configuraci\xf3n-inicial",level:2},{value:"\ud83d\udce6 <strong>Dependencias necesarias</strong>",id:"-dependencias-necesarias",level:3},{value:"\ud83d\udd27 <strong>Setup Firebase CLI</strong>",id:"-setup-firebase-cli",level:3},{value:"\ud83d\udd27 <strong>Inicializaci\xf3n en Flutter</strong>",id:"-inicializaci\xf3n-en-flutter",level:2},{value:"\ud83d\udcf1 <strong>Configuraci\xf3n main.dart</strong>",id:"-configuraci\xf3n-maindart",level:3},{value:"\ud83d\uddc4\ufe0f <strong>Cloud Firestore - Base de Datos</strong>",id:"\ufe0f-cloud-firestore---base-de-datos",level:2},{value:"\ud83d\udcca <strong>Estructura de datos</strong>",id:"-estructura-de-datos",level:3},{value:"\ud83d\udd25 <strong>Firestore Service</strong>",id:"-firestore-service",level:3},{value:"\ud83d\udcbe <strong>Firebase Storage - Archivos</strong>",id:"-firebase-storage---archivos",level:2},{value:"\ud83d\udcf1 <strong>Storage Service</strong>",id:"-storage-service",level:3},{value:"\ud83d\udcf1 <strong>Firebase Cloud Messaging</strong>",id:"-firebase-cloud-messaging",level:2},{value:"\ud83d\udd14 <strong>Notification Service</strong>",id:"-notification-service",level:3},{value:"\ud83d\udcca <strong>Firebase Analytics</strong>",id:"-firebase-analytics",level:2},{value:"\ud83d\udcc8 <strong>Analytics Service</strong>",id:"-analytics-service",level:3},{value:"\ud83d\udc1b <strong>Firebase Crashlytics</strong>",id:"-firebase-crashlytics",level:2},{value:"\ud83d\udcca <strong>Crash Reporting</strong>",id:"-crash-reporting",level:3},{value:"\u2699\ufe0f <strong>Firebase Rules &amp; Security</strong>",id:"\ufe0f-firebase-rules--security",level:2},{value:"\ud83d\udd12 <strong>Firestore Security Rules</strong>",id:"-firestore-security-rules",level:3},{value:"\ud83d\udcbe <strong>Storage Security Rules</strong>",id:"-storage-security-rules",level:3},{value:"\u2705 <strong>Checklist Firebase</strong>",id:"-checklist-firebase",level:2},{value:"\ud83c\udfaf <strong>Siguiente Paso</strong>",id:"-siguiente-paso",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-integraci\xf3n-con-firebase",children:"\ud83d\udd25 Integraci\xf3n con Firebase"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Objetivo"}),": Configurar Firebase completo para una aplicaci\xf3n Flutter profesional"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Firebase es la plataforma de desarrollo de Google que proporciona servicios backend esenciales para aplicaciones m\xf3viles. Aprender\xe1s a integrar todos los servicios necesarios para BeamMe."}),"\n",(0,a.jsxs)(n.h2,{id:"-servicios-firebase-que-implementaremos",children:["\ud83c\udfaf ",(0,a.jsx)(n.strong,{children:"Servicios Firebase que Implementaremos"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-backend-as-a-service",children:["\ud83d\udd27 ",(0,a.jsx)(n.strong,{children:"Backend as a Service:"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd10 ",(0,a.jsx)(n.strong,{children:"Firebase Authentication"})," - Sistema completo de auth"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\uddc4\ufe0f ",(0,a.jsx)(n.strong,{children:"Cloud Firestore"})," - Base de datos NoSQL en tiempo real"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcbe ",(0,a.jsx)(n.strong,{children:"Cloud Storage"})," - Almacenamiento de archivos (im\xe1genes/videos)"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcf1 ",(0,a.jsx)(n.strong,{children:"Cloud Messaging (FCM)"})," - Notificaciones push"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Analytics"})," - M\xe9tricas y comportamiento de usuarios"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,a.jsx)(n.strong,{children:"Crashlytics"})," - Reporte de crashes en producci\xf3n"]}),"\n",(0,a.jsxs)(n.li,{children:["\u26a1 ",(0,a.jsx)(n.strong,{children:"Cloud Functions"})," - L\xf3gica backend serverless"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"-configuraci\xf3n-inicial",children:["\ud83d\ude80 ",(0,a.jsx)(n.strong,{children:"Configuraci\xf3n Inicial"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-dependencias-necesarias",children:["\ud83d\udce6 ",(0,a.jsx)(n.strong,{children:"Dependencias necesarias"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="pubspec.yaml"',children:"dependencies:\n  # \ud83d\udd25 Core Firebase\n  firebase_core: ^2.24.2\n  \n  # \ud83d\udd10 Authentication\n  firebase_auth: ^4.15.3\n  \n  # \ud83d\uddc4\ufe0f Firestore Database\n  cloud_firestore: ^4.13.6\n  \n  # \ud83d\udcbe Storage\n  firebase_storage: ^11.5.6\n  \n  # \ud83d\udcf1 Messaging\n  firebase_messaging: ^14.7.10\n  \n  # \ud83d\udcca Analytics & Crashlytics\n  firebase_analytics: ^10.7.4\n  firebase_crashlytics: ^3.4.9\n  \n  # \u26a1 Cloud Functions\n  cloud_functions: ^4.6.0\n  \n  # \ud83d\udd27 Utilities\n  image_picker: ^1.0.4\n  path_provider: ^2.1.1\n\ndev_dependencies:\n  # \ud83d\udee0\ufe0f Firebase Tools\n  firebase_core_platform_interface: ^5.0.0\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"-setup-firebase-cli",children:["\ud83d\udd27 ",(0,a.jsx)(n.strong,{children:"Setup Firebase CLI"})]}),"\n","\n",(0,a.jsx)(r.A,{code:"# Instalar Firebase CLI\nnpm install -g firebase-tools\n\n# Login a Firebase\nfirebase login\n\n# Instalar FlutterFire CLI\ndart pub global activate flutterfire_cli\n\n# Configurar Firebase para Flutter\nflutterfire configure\n\n# Seleccionar proyecto existente o crear uno nuevo\n# Seleccionar plataformas: android, ios, web\n# Esto genera firebase_options.dart autom\xe1ticamente",language:"bash",title:"Configuraci\xf3n Firebase"}),"\n",(0,a.jsxs)(n.h2,{id:"-inicializaci\xf3n-en-flutter",children:["\ud83d\udd27 ",(0,a.jsx)(n.strong,{children:"Inicializaci\xf3n en Flutter"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-configuraci\xf3n-maindart",children:["\ud83d\udcf1 ",(0,a.jsx)(n.strong,{children:"Configuraci\xf3n main.dart"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/main.dart"',children:"import 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/foundation.dart';\n\nimport 'firebase_options.dart';\nimport 'app/app.dart';\nimport 'core/services/notification_service.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  \n  // \ud83d\udd25 Inicializar Firebase\n  await Firebase.initializeApp(\n    options: DefaultFirebaseOptions.currentPlatform,\n  );\n  \n  // \ud83d\udc1b Configurar Crashlytics\n  if (!kDebugMode) {\n    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterError;\n    PlatformDispatcher.instance.onError = (error, stack) {\n      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);\n      return true;\n    };\n  }\n  \n  // \ud83d\udcf1 Configurar notificaciones push\n  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);\n  \n  // \ud83d\ude80 Ejecutar aplicaci\xf3n\n  runApp(const BeamMeApp());\n}\n\n// \ud83d\udcf1 Handler para mensajes en background\n@pragma('vm:entry-point')\nFuture<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {\n  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);\n  await NotificationService.instance.handleBackgroundMessage(message);\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"\ufe0f-cloud-firestore---base-de-datos",children:["\ud83d\uddc4\ufe0f ",(0,a.jsx)(n.strong,{children:"Cloud Firestore - Base de Datos"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-estructura-de-datos",children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Estructura de datos"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/data/models/user_model.dart"',children:"import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:freezed/freezed.dart';\nimport 'package:json_annotation/json_annotation.dart';\n\nimport '../../domain/entities/user.dart';\n\npart 'user_model.freezed.dart';\npart 'user_model.g.dart';\n\n@freezed\nclass UserModel with _$UserModel {\n  const factory UserModel({\n    required String id,\n    required String email,\n    String? displayName,\n    String? photoURL,\n    String? phoneNumber,\n    @Default(false) bool emailVerified,\n    @Default([]) List<String> interests,\n    @Default(0) int postsCount,\n    @Default(0) int followersCount,\n    @Default(0) int followingCount,\n    @JsonKey(name: 'created_at') DateTime? createdAt,\n    @JsonKey(name: 'updated_at') DateTime? updatedAt,\n  }) = _UserModel;\n\n  factory UserModel.fromJson(Map<String, dynamic> json) =>\n      _$UserModelFromJson(json);\n\n  // \ud83d\udd04 Conversi\xf3n desde DocumentSnapshot\n  factory UserModel.fromDocumentSnapshot(DocumentSnapshot doc) {\n    final data = doc.data() as Map<String, dynamic>;\n    return UserModel.fromJson({\n      'id': doc.id,\n      ...data,\n    });\n  }\n\n  // \ud83d\udcc4 Conversi\xf3n a Map para Firestore\n  Map<String, dynamic> toFirestore() {\n    final json = toJson();\n    json.remove('id'); // El ID lo maneja Firestore\n    return json;\n  }\n}\n\n// \ud83c\udfaf Extensi\xf3n para convertir a entidad\nextension UserModelExt on UserModel {\n  User toEntity() {\n    return User(\n      id: id,\n      email: email,\n      displayName: displayName,\n      photoURL: photoURL,\n      phoneNumber: phoneNumber,\n      emailVerified: emailVerified,\n      createdAt: createdAt,\n    );\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"-firestore-service",children:["\ud83d\udd25 ",(0,a.jsx)(n.strong,{children:"Firestore Service"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/data/services/firestore_service.dart"',children:"import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:injectable/injectable.dart';\n\nimport '../models/user_model.dart';\nimport '../models/post_model.dart';\n\n@injectable\nclass FirestoreService {\n  FirestoreService(this._firestore);\n\n  final FirebaseFirestore _firestore;\n\n  // \ud83d\udcda Collections\n  CollectionReference<UserModel> get users =>\n      _firestore.collection('users').withConverter<UserModel>(\n            fromFirestore: (snapshot, _) => UserModel.fromDocumentSnapshot(snapshot),\n            toFirestore: (user, _) => user.toFirestore(),\n          );\n\n  CollectionReference<PostModel> get posts =>\n      _firestore.collection('posts').withConverter<PostModel>(\n            fromFirestore: (snapshot, _) => PostModel.fromDocumentSnapshot(snapshot),\n            toFirestore: (post, _) => post.toFirestore(),\n          );\n\n  // \ud83d\udc64 Operaciones de Usuario\n  Future<UserModel?> getUser(String userId) async {\n    try {\n      final doc = await users.doc(userId).get();\n      return doc.exists ? doc.data() : null;\n    } catch (e) {\n      throw Exception('Error obteniendo usuario: $e');\n    }\n  }\n\n  Future<void> createUser(UserModel user) async {\n    try {\n      await users.doc(user.id).set(user);\n    } catch (e) {\n      throw Exception('Error creando usuario: $e');\n    }\n  }\n\n  Future<void> updateUser(String userId, Map<String, dynamic> updates) async {\n    try {\n      updates['updated_at'] = FieldValue.serverTimestamp();\n      await users.doc(userId).update(updates);\n    } catch (e) {\n      throw Exception('Error actualizando usuario: $e');\n    }\n  }\n\n  Stream<UserModel?> watchUser(String userId) {\n    return users.doc(userId).snapshots().map((doc) {\n      return doc.exists ? doc.data() : null;\n    });\n  }\n\n  // \ud83d\udcc4 Operaciones de Posts\n  Future<List<PostModel>> getPosts({\n    int limit = 10,\n    DocumentSnapshot? startAfter,\n    String? category,\n  }) async {\n    try {\n      Query<PostModel> query = posts\n          .orderBy('created_at', descending: true)\n          .limit(limit);\n\n      if (category != null) {\n        query = query.where('category', isEqualTo: category);\n      }\n\n      if (startAfter != null) {\n        query = query.startAfterDocument(startAfter);\n      }\n\n      final snapshot = await query.get();\n      return snapshot.docs.map((doc) => doc.data()).toList();\n    } catch (e) {\n      throw Exception('Error obteniendo posts: $e');\n    }\n  }\n\n  Future<PostModel> createPost(PostModel post) async {\n    try {\n      final docRef = await posts.add(post.copyWith(\n        createdAt: DateTime.now(),\n        updatedAt: DateTime.now(),\n      ));\n      \n      final doc = await docRef.get();\n      return doc.data()!;\n    } catch (e) {\n      throw Exception('Error creando post: $e');\n    }\n  }\n\n  Future<void> likePost(String postId, String userId) async {\n    try {\n      await _firestore.runTransaction((transaction) async {\n        final postRef = posts.doc(postId);\n        final likesRef = postRef.collection('likes').doc(userId);\n        \n        final postDoc = await transaction.get(postRef);\n        final likeDoc = await transaction.get(likesRef);\n        \n        if (likeDoc.exists) {\n          // \ud83d\udc4e Quitar like\n          transaction.delete(likesRef);\n          transaction.update(postRef, {\n            'like_count': FieldValue.increment(-1),\n          });\n        } else {\n          // \ud83d\udc4d Dar like\n          transaction.set(likesRef, {\n            'user_id': userId,\n            'created_at': FieldValue.serverTimestamp(),\n          });\n          transaction.update(postRef, {\n            'like_count': FieldValue.increment(1),\n          });\n        }\n      });\n    } catch (e) {\n      throw Exception('Error actualizando like: $e');\n    }\n  }\n\n  // \ud83d\udd0d B\xfasqueda\n  Future<List<PostModel>> searchPosts(String query) async {\n    try {\n      // \u26a0\ufe0f Firestore no tiene b\xfasqueda full-text nativa\n      // Usar Algolia o ElasticSearch para producci\xf3n\n      final snapshot = await posts\n          .where('title', isGreaterThanOrEqualTo: query)\n          .where('title', isLessThanOrEqualTo: query + '\\uf8ff')\n          .limit(20)\n          .get();\n      \n      return snapshot.docs.map((doc) => doc.data()).toList();\n    } catch (e) {\n      throw Exception('Error buscando posts: $e');\n    }\n  }\n\n  // \ud83d\udcca Agregaciones\n  Future<Map<String, int>> getUserStats(String userId) async {\n    try {\n      final futures = await Future.wait([\n        posts.where('author_id', isEqualTo: userId).count().get(),\n        users.doc(userId).collection('followers').count().get(),\n        users.doc(userId).collection('following').count().get(),\n      ]);\n\n      return {\n        'posts': futures[0].count,\n        'followers': futures[1].count,\n        'following': futures[2].count,\n      };\n    } catch (e) {\n      throw Exception('Error obteniendo estad\xedsticas: $e');\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-firebase-storage---archivos",children:["\ud83d\udcbe ",(0,a.jsx)(n.strong,{children:"Firebase Storage - Archivos"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-storage-service",children:["\ud83d\udcf1 ",(0,a.jsx)(n.strong,{children:"Storage Service"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/data/services/storage_service.dart"',children:"import 'dart:io';\nimport 'dart:typed_data';\n\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:injectable/injectable.dart';\nimport 'package:path/path.dart' as path;\n\n@injectable\nclass StorageService {\n  StorageService(this._storage);\n\n  final FirebaseStorage _storage;\n\n  // \ud83d\udcc1 Referencias de carpetas\n  Reference get _images => _storage.ref('images');\n  Reference get _videos => _storage.ref('videos');\n  Reference get _profiles => _storage.ref('profiles');\n  Reference get _posts => _storage.ref('posts');\n\n  // \ud83d\uddbc\ufe0f Subir imagen de perfil\n  Future<String> uploadProfileImage(String userId, File imageFile) async {\n    try {\n      final fileName = '${userId}_${DateTime.now().millisecondsSinceEpoch}${path.extension(imageFile.path)}';\n      final ref = _profiles.child(fileName);\n      \n      final uploadTask = ref.putFile(\n        imageFile,\n        SettableMetadata(\n          contentType: 'image/jpeg',\n          customMetadata: {\n            'user_id': userId,\n            'type': 'profile_image',\n          },\n        ),\n      );\n\n      // \ud83d\udcca Mostrar progreso\n      uploadTask.snapshotEvents.listen((TaskSnapshot snapshot) {\n        final progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        print('Upload progress: ${progress.toStringAsFixed(2)}%');\n      });\n\n      final snapshot = await uploadTask;\n      return await snapshot.ref.getDownloadURL();\n    } catch (e) {\n      throw Exception('Error subiendo imagen de perfil: $e');\n    }\n  }\n\n  // \ud83d\udcc4 Subir imagen de post\n  Future<String> uploadPostImage(String postId, File imageFile) async {\n    try {\n      final fileName = '${postId}_${DateTime.now().millisecondsSinceEpoch}${path.extension(imageFile.path)}';\n      final ref = _posts.child(fileName);\n      \n      // \ud83d\udddc\ufe0f Comprimir imagen antes de subir\n      final compressedImage = await _compressImage(imageFile);\n      \n      final uploadTask = ref.putData(\n        compressedImage,\n        SettableMetadata(\n          contentType: 'image/jpeg',\n          customMetadata: {\n            'post_id': postId,\n            'type': 'post_image',\n          },\n        ),\n      );\n\n      final snapshot = await uploadTask;\n      return await snapshot.ref.getDownloadURL();\n    } catch (e) {\n      throw Exception('Error subiendo imagen de post: $e');\n    }\n  }\n\n  // \ud83c\udfa5 Subir video\n  Future<String> uploadVideo(String postId, File videoFile) async {\n    try {\n      final fileName = '${postId}_${DateTime.now().millisecondsSinceEpoch}${path.extension(videoFile.path)}';\n      final ref = _videos.child(fileName);\n      \n      final uploadTask = ref.putFile(\n        videoFile,\n        SettableMetadata(\n          contentType: 'video/mp4',\n          customMetadata: {\n            'post_id': postId,\n            'type': 'post_video',\n          },\n        ),\n      );\n\n      final snapshot = await uploadTask;\n      return await snapshot.ref.getDownloadURL();\n    } catch (e) {\n      throw Exception('Error subiendo video: $e');\n    }\n  }\n\n  // \ud83d\uddd1\ufe0f Eliminar archivo\n  Future<void> deleteFile(String downloadUrl) async {\n    try {\n      final ref = _storage.refFromURL(downloadUrl);\n      await ref.delete();\n    } catch (e) {\n      throw Exception('Error eliminando archivo: $e');\n    }\n  }\n\n  // \ud83d\udcca Obtener metadatos\n  Future<FullMetadata> getFileMetadata(String downloadUrl) async {\n    try {\n      final ref = _storage.refFromURL(downloadUrl);\n      return await ref.getMetadata();\n    } catch (e) {\n      throw Exception('Error obteniendo metadatos: $e');\n    }\n  }\n\n  // \ud83d\udddc\ufe0f Comprimir imagen\n  Future<Uint8List> _compressImage(File imageFile) async {\n    // Implementar compresi\xf3n de imagen\n    // Puedes usar packages como image_compress o flutter_image_compress\n    return await imageFile.readAsBytes();\n  }\n\n  // \ud83d\udcf1 Upload con m\xfaltiples archivos\n  Future<List<String>> uploadMultipleImages(String postId, List<File> images) async {\n    try {\n      final futures = images.asMap().entries.map((entry) {\n        final index = entry.key;\n        final file = entry.value;\n        final fileName = '${postId}_$index${path.extension(file.path)}';\n        final ref = _posts.child(fileName);\n        \n        return ref.putFile(file).then((snapshot) => snapshot.ref.getDownloadURL());\n      });\n\n      return await Future.wait(futures);\n    } catch (e) {\n      throw Exception('Error subiendo m\xfaltiples im\xe1genes: $e');\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-firebase-cloud-messaging",children:["\ud83d\udcf1 ",(0,a.jsx)(n.strong,{children:"Firebase Cloud Messaging"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-notification-service",children:["\ud83d\udd14 ",(0,a.jsx)(n.strong,{children:"Notification Service"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/core/services/notification_service.dart"',children:"import 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\nimport 'package:injectable/injectable.dart';\n\n@singleton\nclass NotificationService {\n  static NotificationService? _instance;\n  static NotificationService get instance => _instance ??= NotificationService._();\n\n  NotificationService._();\n\n  final FirebaseMessaging _fcm = FirebaseMessaging.instance;\n  final FlutterLocalNotificationsPlugin _localNotifications =\n      FlutterLocalNotificationsPlugin();\n\n  bool _initialized = false;\n\n  // \ud83d\ude80 Inicializar servicio\n  Future<void> initialize() async {\n    if (_initialized) return;\n\n    await _requestPermission();\n    await _configureLocalNotifications();\n    await _configureFCM();\n\n    _initialized = true;\n  }\n\n  // \ud83d\udd10 Solicitar permisos\n  Future<void> _requestPermission() async {\n    final settings = await _fcm.requestPermission(\n      alert: true,\n      badge: true,\n      sound: true,\n      provisional: false,\n    );\n\n    print('Permission status: ${settings.authorizationStatus}');\n  }\n\n  // \ud83d\udcf1 Configurar notificaciones locales\n  Future<void> _configureLocalNotifications() async {\n    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');\n    const iosSettings = DarwinInitializationSettings(\n      requestSoundPermission: true,\n      requestBadgePermission: true,\n      requestAlertPermission: true,\n    );\n\n    await _localNotifications.initialize(\n      const InitializationSettings(\n        android: androidSettings,\n        iOS: iosSettings,\n      ),\n      onDidReceiveNotificationResponse: _onNotificationTapped,\n    );\n  }\n\n  // \ud83d\udd25 Configurar FCM\n  Future<void> _configureFCM() async {\n    // \ud83d\udcf1 Notificaciones en foreground\n    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);\n\n    // \ud83d\udcf1 Notificaci\xf3n clickeada\n    FirebaseMessaging.onMessageOpenedApp.listen(_handleNotificationClick);\n\n    // \ud83d\udcf1 App abierta desde notificaci\xf3n (terminated)\n    final initialMessage = await _fcm.getInitialMessage();\n    if (initialMessage != null) {\n      _handleNotificationClick(initialMessage);\n    }\n  }\n\n  // \ud83d\udd11 Obtener token FCM\n  Future<String?> getFCMToken() async {\n    try {\n      return await _fcm.getToken();\n    } catch (e) {\n      print('Error obteniendo FCM token: $e');\n      return null;\n    }\n  }\n\n  // \ud83d\udce2 Suscribirse a tema\n  Future<void> subscribeToTopic(String topic) async {\n    try {\n      await _fcm.subscribeToTopic(topic);\n      print('Suscrito al tema: $topic');\n    } catch (e) {\n      print('Error suscribi\xe9ndose al tema: $e');\n    }\n  }\n\n  // \ud83d\udce2 Desuscribirse de tema\n  Future<void> unsubscribeFromTopic(String topic) async {\n    try {\n      await _fcm.unsubscribeFromTopic(topic);\n      print('Desuscrito del tema: $topic');\n    } catch (e) {\n      print('Error desuscribi\xe9ndose del tema: $e');\n    }\n  }\n\n  // \ud83d\udcf1 Manejar mensajes en foreground\n  Future<void> _handleForegroundMessage(RemoteMessage message) async {\n    print('Mensaje recibido en foreground: ${message.messageId}');\n\n    // \ud83d\udd14 Mostrar notificaci\xf3n local\n    await _showLocalNotification(\n      title: message.notification?.title ?? 'Nueva notificaci\xf3n',\n      body: message.notification?.body ?? '',\n      data: message.data,\n    );\n  }\n\n  // \ud83d\udcf1 Manejar mensajes en background\n  Future<void> handleBackgroundMessage(RemoteMessage message) async {\n    print('Mensaje recibido en background: ${message.messageId}');\n    // Procesar datos si es necesario\n  }\n\n  // \ud83d\udd14 Mostrar notificaci\xf3n local\n  Future<void> _showLocalNotification({\n    required String title,\n    required String body,\n    Map<String, dynamic>? data,\n  }) async {\n    const androidDetails = AndroidNotificationDetails(\n      'high_importance_channel',\n      'High Importance Notifications',\n      channelDescription: 'Notificaciones importantes de la aplicaci\xf3n',\n      importance: Importance.high,\n      priority: Priority.high,\n      icon: '@mipmap/ic_launcher',\n    );\n\n    const iosDetails = DarwinNotificationDetails(\n      presentAlert: true,\n      presentBadge: true,\n      presentSound: true,\n    );\n\n    await _localNotifications.show(\n      DateTime.now().millisecondsSinceEpoch ~/ 1000,\n      title,\n      body,\n      const NotificationDetails(\n        android: androidDetails,\n        iOS: iosDetails,\n      ),\n      payload: data?.toString(),\n    );\n  }\n\n  // \ud83d\udc46 Manejar click en notificaci\xf3n\n  void _handleNotificationClick(RemoteMessage message) {\n    print('Notificaci\xf3n clickeada: ${message.messageId}');\n    \n    // \ud83e\udded Navegar seg\xfan el tipo de notificaci\xf3n\n    final data = message.data;\n    final type = data['type'];\n    \n    switch (type) {\n      case 'new_post':\n        _navigateToPost(data['post_id']);\n        break;\n      case 'new_follower':\n        _navigateToProfile(data['user_id']);\n        break;\n      case 'new_like':\n        _navigateToPost(data['post_id']);\n        break;\n      default:\n        _navigateToHome();\n    }\n  }\n\n  // \ud83d\udc46 Manejar tap en notificaci\xf3n local\n  void _onNotificationTapped(NotificationResponse response) {\n    print('Notificaci\xf3n local tapped: ${response.payload}');\n    // Procesar payload y navegar\n  }\n\n  // \ud83e\udded M\xe9todos de navegaci\xf3n\n  void _navigateToPost(String? postId) {\n    if (postId != null) {\n      // Implementar navegaci\xf3n al post\n      print('Navegando al post: $postId');\n    }\n  }\n\n  void _navigateToProfile(String? userId) {\n    if (userId != null) {\n      // Implementar navegaci\xf3n al perfil\n      print('Navegando al perfil: $userId');\n    }\n  }\n\n  void _navigateToHome() {\n    // Implementar navegaci\xf3n al home\n    print('Navegando al home');\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-firebase-analytics",children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Firebase Analytics"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-analytics-service",children:["\ud83d\udcc8 ",(0,a.jsx)(n.strong,{children:"Analytics Service"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/core/services/analytics_service.dart"',children:"import 'package:firebase_analytics/firebase_analytics.dart';\nimport 'package:injectable/injectable.dart';\n\n@singleton\nclass AnalyticsService {\n  AnalyticsService(this._analytics);\n\n  final FirebaseAnalytics _analytics;\n\n  // \ud83d\udcca Eventos personalizados\n  Future<void> logPostCreated(String postId, String category) async {\n    await _analytics.logEvent(\n      name: 'post_created',\n      parameters: {\n        'post_id': postId,\n        'category': category,\n        'timestamp': DateTime.now().toIso8601String(),\n      },\n    );\n  }\n\n  Future<void> logPostLiked(String postId, String userId) async {\n    await _analytics.logEvent(\n      name: 'post_liked',\n      parameters: {\n        'post_id': postId,\n        'user_id': userId,\n        'timestamp': DateTime.now().toIso8601String(),\n      },\n    );\n  }\n\n  Future<void> logUserSignUp(String method) async {\n    await _analytics.logSignUp(signUpMethod: method);\n  }\n\n  Future<void> logUserLogin(String method) async {\n    await _analytics.logLogin(loginMethod: method);\n  }\n\n  // \ud83c\udfaf Eventos de navegaci\xf3n\n  Future<void> logScreenView(String screenName) async {\n    await _analytics.logScreenView(screenName: screenName);\n  }\n\n  // \ud83d\udc64 Propiedades de usuario\n  Future<void> setUserId(String userId) async {\n    await _analytics.setUserId(id: userId);\n  }\n\n  Future<void> setUserProperty(String name, String value) async {\n    await _analytics.setUserProperty(name: name, value: value);\n  }\n\n  // \ud83d\uded2 E-commerce (si aplica)\n  Future<void> logPurchase({\n    required String transactionId,\n    required double value,\n    required String currency,\n    required List<AnalyticsEventItem> items,\n  }) async {\n    await _analytics.logPurchase(\n      transactionId: transactionId,\n      value: value,\n      currency: currency,\n      items: items,\n    );\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-firebase-crashlytics",children:["\ud83d\udc1b ",(0,a.jsx)(n.strong,{children:"Firebase Crashlytics"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-crash-reporting",children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Crash Reporting"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",metastring:'title="lib/core/services/crashlytics_service.dart"',children:"import 'package:firebase_crashlytics/firebase_crashlytics.dart';\nimport 'package:injectable/injectable.dart';\nimport 'package:flutter/foundation.dart';\n\n@singleton\nclass CrashlyticsService {\n  CrashlyticsService(this._crashlytics);\n\n  final FirebaseCrashlytics _crashlytics;\n\n  // \ud83d\udc1b Reportar error\n  Future<void> recordError(\n    dynamic exception,\n    StackTrace? stack, {\n    String? reason,\n    bool fatal = false,\n  }) async {\n    if (kDebugMode) {\n      // No reportar en debug\n      print('Error (debug): $exception');\n      return;\n    }\n\n    await _crashlytics.recordError(\n      exception,\n      stack,\n      reason: reason,\n      fatal: fatal,\n    );\n  }\n\n  // \ud83d\udcdd Log personalizado\n  Future<void> log(String message) async {\n    await _crashlytics.log(message);\n  }\n\n  // \ud83d\udc64 Establecer usuario\n  Future<void> setUserId(String userId) async {\n    await _crashlytics.setUserId(userId);\n  }\n\n  // \ud83d\udd27 Establecer custom key\n  Future<void> setCustomKey(String key, dynamic value) async {\n    await _crashlytics.setCustomKey(key, value);\n  }\n\n  // \ud83d\udcca Forzar crash (solo testing)\n  void testCrash() {\n    if (kDebugMode) {\n      _crashlytics.crash();\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"\ufe0f-firebase-rules--security",children:["\u2699\ufe0f ",(0,a.jsx)(n.strong,{children:"Firebase Rules & Security"})]}),"\n",(0,a.jsxs)(n.h3,{id:"-firestore-security-rules",children:["\ud83d\udd12 ",(0,a.jsx)(n.strong,{children:"Firestore Security Rules"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="firestore.rules"',children:"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // \ud83d\udc64 Users collection\n    match /users/{userId} {\n      // Solo el usuario puede leer/escribir su propio documento\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n      \n      // Todos pueden leer perfiles p\xfablicos (campos espec\xedficos)\n      allow read: if request.auth != null;\n    }\n    \n    // \ud83d\udcc4 Posts collection\n    match /posts/{postId} {\n      // Todos los usuarios autenticados pueden leer posts\n      allow read: if request.auth != null;\n      \n      // Solo el autor puede crear/actualizar sus posts\n      allow create: if request.auth != null \n        && request.auth.uid == request.resource.data.author_id;\n      \n      allow update: if request.auth != null \n        && request.auth.uid == resource.data.author_id;\n      \n      allow delete: if request.auth != null \n        && request.auth.uid == resource.data.author_id;\n        \n      // \ud83d\udc4d Likes subcollection\n      match /likes/{likeId} {\n        allow read: if request.auth != null;\n        allow create, delete: if request.auth != null \n          && request.auth.uid == request.resource.data.user_id;\n      }\n      \n      // \ud83d\udcac Comments subcollection\n      match /comments/{commentId} {\n        allow read: if request.auth != null;\n        allow create: if request.auth != null \n          && request.auth.uid == request.resource.data.user_id;\n        allow update, delete: if request.auth != null \n          && request.auth.uid == resource.data.user_id;\n      }\n    }\n    \n    // \ud83d\udd14 Notifications collection\n    match /notifications/{notificationId} {\n      // Solo el usuario destinatario puede leer sus notificaciones\n      allow read, write: if request.auth != null \n        && request.auth.uid == resource.data.user_id;\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"-storage-security-rules",children:["\ud83d\udcbe ",(0,a.jsx)(n.strong,{children:"Storage Security Rules"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",metastring:'title="storage.rules"',children:"rules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    // \ud83d\uddbc\ufe0f Profile images\n    match /profiles/{fileName} {\n      // Solo el usuario puede subir/leer su imagen de perfil\n      allow read, write: if request.auth != null \n        && request.auth.uid == resource.metadata.customMetadata.user_id;\n    }\n    \n    // \ud83d\udcc4 Post images\n    match /posts/{fileName} {\n      // Todos pueden leer im\xe1genes de posts\n      allow read: if request.auth != null;\n      \n      // Solo usuarios autenticados pueden subir\n      allow write: if request.auth != null\n        && request.resource.size < 10 * 1024 * 1024 // M\xe1ximo 10MB\n        && request.resource.contentType.matches('image/.*');\n    }\n    \n    // \ud83c\udfa5 Videos\n    match /videos/{fileName} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null\n        && request.resource.size < 100 * 1024 * 1024 // M\xe1ximo 100MB\n        && request.resource.contentType.matches('video/.*');\n    }\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"-checklist-firebase",children:["\u2705 ",(0,a.jsx)(n.strong,{children:"Checklist Firebase"})]}),"\n",(0,a.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Firebase CLI instalado y configurado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Proyecto Firebase creado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","FlutterFire CLI configurado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","firebase_options.dart generado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Dependencias instaladas"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Inicializaci\xf3n en main.dart"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Firestore service implementado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Storage service implementado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Notification service configurado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Analytics configurado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Crashlytics configurado"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Security rules implementadas"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Testing en dispositivos reales"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"\ud83d\udd25 Mejores Pr\xe1cticas",type:"tip",children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Usar TypeScript"})," para Cloud Functions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Implementar Security Rules"})," restrictivas"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cachear datos"})," para mejor performance"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Comprimir im\xe1genes"})," antes de subir"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Manejar estados offline"})," correctamente"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Monitorear costos"})," en Firebase Console"]}),"\n"]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"-siguiente-paso",children:["\ud83c\udfaf ",(0,a.jsx)(n.strong,{children:"Siguiente Paso"})]}),"\n",(0,a.jsx)(n.p,{children:"\xa1Excelente! Ya tienes Firebase completamente integrado."}),"\n",(0,a.jsxs)(n.p,{children:["\ud83d\udc49 ",(0,a.jsx)(n.strong,{children:"Contin\xfaa con"}),": ",(0,a.jsx)(n.a,{href:"/flutterFormacion/docs/servicios/payments",children:"Integraci\xf3n de Pagos"})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"\u23f1\ufe0f Tiempo de implementaci\xf3n: 4-6 horas"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},7811:(e,n,i)=>{i.d(n,{A:()=>o});var t=i(6540),a=i(1028);const s={codeSnippetContainer:"codeSnippetContainer_uJyI",header:"header_z4pd",title:"title_crXx",copyButton:"copyButton_btfw",copied:"copied_whsi",codeContainer:"codeContainer_stuK"};var r=i(4848);function o({code:e,language:n="bash",title:i="Terminal",copyable:o=!0}){const[c,l]=(0,t.useState)(!1);return(0,r.jsxs)("div",{className:s.codeSnippetContainer,children:[(0,r.jsxs)("div",{className:s.header,children:[(0,r.jsxs)("span",{className:s.title,children:["\ud83d\udcf1 ",i]}),o&&(0,r.jsx)("button",{className:`${s.copyButton} ${c?s.copied:""}`,onClick:async()=>{try{await navigator.clipboard.writeText(e),l(!0),setTimeout(()=>l(!1),2e3)}catch(n){console.error("Failed to copy code:",n)}},"aria-label":"Copiar c\xf3digo",children:c?"\u2705 Copiado!":"\ud83d\udccb Copiar"})]}),(0,r.jsx)("div",{className:s.codeContainer,children:(0,r.jsx)(a.A,{language:n,title:"",children:e})})]})}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);